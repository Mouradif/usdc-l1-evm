// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package usdcreceiver

import (
	"errors"
	"fmt"
	"github.com/holiman/uint256"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	ReceiveTeleporterMessageGasCost uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// USDCReceiverRawABI contains the raw ABI of USDCReceiver contract.
	//go:embed contract.abi
	USDCReceiverRawABI string

	USDCReceiverABI = contract.ParseABI(USDCReceiverRawABI)

	USDCReceiverPrecompile = createUSDCReceiverPrecompile()
)

type ReceiveTeleporterMessageInput struct {
	SourceBlockchainID  [32]byte
	OriginSenderAddress common.Address
	Message             []byte
}

type USDCDeposit struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
}

// UnpackReceiveTeleporterMessageInput attempts to unpack [input] as ReceiveTeleporterMessageInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackReceiveTeleporterMessageInput(input []byte) (ReceiveTeleporterMessageInput, error) {
	inputStruct := ReceiveTeleporterMessageInput{}
	err := USDCReceiverABI.UnpackInputIntoInterface(&inputStruct, "receiveTeleporterMessage", input, false)

	return inputStruct, err
}

func UnpackUSDCDeposit(input []byte) (USDCDeposit, error) {
	deposit := USDCDeposit{}
	if len(input) != 96 {
		return deposit, errors.New("invalid deposit data")
	}
	deposit.From = common.BytesToAddress(input[:32])
	deposit.To = common.BytesToAddress(input[32:64])
	deposit.Amount = new(big.Int).SetBytes(input[64:])
	return deposit, nil
}

// PackReceiveTeleporterMessage packs [inputStruct] of type ReceiveTeleporterMessageInput into the appropriate arguments for receiveTeleporterMessage.
func PackReceiveTeleporterMessage(inputStruct ReceiveTeleporterMessageInput) ([]byte, error) {
	return USDCReceiverABI.Pack("receiveTeleporterMessage", inputStruct.SourceBlockchainID, inputStruct.OriginSenderAddress, inputStruct.Message)
}

func receiveTeleporterMessage(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, ReceiveTeleporterMessageGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the ReceiveTeleporterMessageInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackReceiveTeleporterMessageInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	deposit, err := UnpackUSDCDeposit(inputStruct.Message)
	if err != nil {
		return nil, remainingGas, err
	}
	stateDB := accessibleState.GetStateDB()
	amount, _ := uint256.FromBig(deposit.Amount)
	if !stateDB.Exist(deposit.To) {
		stateDB.CreateAccount(deposit.To)
	}
	stateDB.AddBalance(deposit.To, amount)

	// Return the packed output and the remaining gas
	return []byte{}, remainingGas, nil
}

// createUSDCReceiverPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.
func createUSDCReceiverPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"receiveTeleporterMessage": receiveTeleporterMessage,
	}

	for name, function := range abiFunctionMap {
		method, ok := USDCReceiverABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
